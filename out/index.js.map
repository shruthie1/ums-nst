{"version":3,"file":"index.js","mappings":"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","sources":[".././src/app.controller.ts",".././src/app.module.ts",".././src/app.service.ts","../external commonjs \"@nestjs/common\"","../external commonjs \"@nestjs/core\"","../external commonjs \"@nestjs/swagger\"","../external commonjs \"common-tg-service\"","../external commonjs \"common-tg-service/dist/components/Telegram/utils/connection-manager\"","../external commonjs \"mongoose\"","../external commonjs \"node-schedule-tz\"","../external commonjs \"telegram/Helpers\"","../external commonjs \"telegram/tl\"","../webpack/bootstrap",".././src/main.ts"],"sourcesContent":["import { Body, Controller, Get, Param, Post, Query, Res, UploadedFile, UseInterceptors } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ApiBody, ApiConsumes, ApiOperation, ApiParam, ApiQuery, ApiResponse } from '@nestjs/swagger';\nimport { Response } from 'express';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { existsSync, mkdirSync, promises as fs } from 'fs';\nimport { join } from 'path';\nimport { diskStorage} from 'multer';\nimport { parseError } from 'common-tg-service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) { }\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('processUsers/:limit/:skip')\n  async processUsers(\n    @Param('limit') limit: number = 30,\n    @Param('skip') skip: number = 20) {\n    return await this.appService.processUsers(limit, skip)\n  }\n\n  @Get('blockUserAll/:tgId')\n  async blockUserAll(@Param('tgId') tgId: string) {\n    return await this.appService.blockUserAll(tgId)\n  }\n\n  @Get('unblockUserAll/:tgId')\n  async unblockUserAll(@Param('tgId') tgId: string) {\n    return await this.appService.unblockUserAll(tgId)\n  }\n\n  @Get('isRecentUser')\n  @ApiOperation({ summary: 'Check if user is recent and return access data' })\n  @ApiParam({ name: 'chatId', type: 'string', required: true })\n  @ApiResponse({ status: 200, description: 'Returns count of recent accesses and video details' })\n  async isRecentUser(@Query('chatId') chatId: string) {\n    return this.appService.isRecentUser(chatId);\n  }\n\n  @Post('isRecentUser')\n  @ApiOperation({ summary: 'Update recent user data' })\n  @ApiParam({ name: 'chatId', type: 'string', required: true })\n  @ApiBody({ type: Object, description: 'Video details to update', required: true })\n  @ApiResponse({ status: 200, description: 'Successfully updated recent user data' })\n  async updateRecentUser(@Query('chatId') chatId: string, @Body() videoDetails: any) {\n    await this.appService.updateRecentUser(chatId, videoDetails);\n    return 'Ok';\n  }\n\n  @Get('resetRecentUser')\n  @ApiOperation({ summary: 'Reset recent user data' })\n  @ApiParam({ name: 'chatId', type: 'string', required: true })\n  @ApiResponse({ status: 200, description: 'Returns count of recent accesses after reset' })\n  async resetRecentUser(@Query('chatId') chatId: string) {\n    return this.appService.resetRecentUser(chatId);\n  }\n\n  @Get('paymentStats')\n  async getPaymentStats(@Query('chatId') chatId: string, @Query('profile') profile: string) {\n    return this.appService.getPaymentStats(chatId, profile);\n  }\n\n  @Get('sendToChannel')\n  @ApiOperation({ summary: 'Send message to channel' })\n  @ApiQuery({ name: 'msg', required: true, description: 'Message to send' })\n  @ApiQuery({ name: 'chatId', required: false, description: 'Chat ID of the channel' })\n  @ApiQuery({ name: 'token', required: false, description: 'Token for authentication' })\n  async sendToChannel(\n    @Query('msg') message: string,\n    @Query('chatId') chatId: string,\n    @Query('token') token: string,\n  ) {\n    try {\n      if (message.length < 1500) {\n        return await this.appService.sendtoChannel(chatId, token, message);\n      } else {\n        console.log(\"Skipped Message:\", decodeURIComponent(message))\n        return 'sent'\n      }\n    } catch (e) {\n      parseError(e);\n    }\n  }\n\n  @Get('sendToAll')\n  @ApiOperation({ summary: 'Send Enpoint to all clients' })\n  @ApiQuery({ name: 'query', required: true, description: 'Endpoint to send' })\n  async sendToAll(@Query('query') query: string) {\n    try {\n      const decodedEndpoint = decodeURIComponent(query);\n      this.appService.sendToAll(decodedEndpoint);\n      return `Send ${query}`\n    } catch (e) {\n      parseError(e);\n      throw e;\n    }\n  }\n\n  @Get('joinChannelsForClients')\n  @ApiOperation({ summary: 'Join Channels for Clients' })\n  async joinChannelsforBufferClients(): Promise<string> {\n    return this.appService.joinchannelForClients();\n  }\n\n  @Get('refreshmap')\n  @ApiOperation({ summary: 'refreshmap for Clients' })\n  async refreshmap(): Promise<void> {\n    return await this.appService.refreshmap();\n  }\n\n\n  @Get('maskedCls')\n  @ApiOperation({ summary: 'Cls Data' })\n  async maskedCls(@Query() query: object): Promise<any> {\n    return await this.appService.findAllMasked(query);\n  }\n\n  @Get('portalData')\n  @ApiOperation({ summary: 'Cls Data' })\n  async portalData(@Query() query: object): Promise<{ client: any, upis: object }> {\n    return await this.appService.portalData(query);\n  }\n\n  @Get('/requestcall')\n  @ApiOperation({ summary: 'Request a call' })\n  @ApiResponse({ status: 200, description: 'Call request processed successfully.' })\n  @ApiQuery({ name: 'username', required: true, description: 'Username' })\n  @ApiQuery({ name: 'chatId', required: true, description: 'Chat ID' })\n  async requestCall(@Query('username') username: string, @Query('chatId') chatId: string) {\n    return await this.appService.getRequestCall(username, chatId);\n  }\n\n  @Get('refreshPrimary')\n  @ApiOperation({ summary: 'Exit primary clients' })\n  @ApiResponse({ status: 200, description: 'exit Call request processed successfully.' })\n  async refreshPrimary() {\n    this.appService.refreshPrimary();\n    return '1';\n  }\n  \n  @Get('refreshSecondary')\n  async refreshSecondary() {\n    this.appService.refreshSecondary();\n    return '2';\n  }\n\n  @Get('exitPrimary')\n  @ApiOperation({ summary: 'Exit primary clients' })\n  @ApiResponse({ status: 200, description: 'exit Call request processed successfully.' })\n  async exitPrimary() {\n    this.appService.exitPrimary();\n    return '1';\n  }\n  \n  @Get('exitSecondary')\n  async exitSecondary() {\n    this.appService.exitSecondary();\n    return '2';\n  }\n\n  @Get(\"exit\")\n  exit(): string {\n    process.exit(1)\n  }\n\n  @Get('/getviddata')\n  @ApiOperation({ summary: 'Get video data' })\n  @ApiResponse({ status: 200, description: 'Video data retrieved successfully.' })\n  @ApiQuery({ name: 'profile', required: false, description: 'Profile' })\n  @ApiQuery({ name: 'clientId', required: false, description: 'clientId' })\n  @ApiQuery({ name: 'chatId', required: true, description: 'chatId' })\n  async getVidData(@Query('profile') profile: string, @Query('clientId') clientId: string, @Query('chatId') chatId: any) {\n    return await this.appService.getUserData(profile, clientId, chatId);\n  }\n\n  @Post('/getviddata')\n  @ApiOperation({ summary: 'Get video data' })\n  @ApiResponse({ status: 200, description: 'Video data retrieved successfully.' })\n  @ApiQuery({ name: 'profile', required: false, description: 'Profile' })\n  @ApiQuery({ name: 'clientId', required: false, description: 'clientId' })\n  @ApiBody({ description: 'Body data', required: true, type: Object })\n  async updateVidData(@Query('profile') profile: string, @Query('clientId') clientId: string, @Body() body: any) {\n    return await this.appService.updateUserData(profile, clientId, body);\n  }\n\n  @Post('/getUserConfig')\n  @ApiOperation({ summary: 'Get user configuration' })\n  @ApiResponse({ status: 200, description: 'User configuration updated successfully.' })\n  @ApiBody({ description: 'Configuration data', required: true, type: Object })\n  async updtaeUserConfig(@Query() filter: any, @Body() data: any) {\n    throw new Error(\"Method not implemented\")\n    // return await this.appService.updateUserConfig(filter, data);\n  }\n\n  @Get('/getUserConfig')\n  @ApiOperation({ summary: 'Get user configuration' })\n  @ApiResponse({ status: 200, description: 'User configuration retrieved successfully.' })\n  async getUserConfig(@Query() filter: any) {\n    return await this.appService.getUserConfig(filter);\n  }\n\n  @Get('/getallupiIds')\n  @ApiOperation({ summary: 'Get all UpiIDs' })\n  @ApiResponse({ status: 200, description: 'All upi Ids retrieved successfully.' })\n  async getallupiIds() {\n    return await this.appService.getallupiIds();\n  }\n\n  @Post('/updateUserData/:chatId')\n  @ApiOperation({ summary: 'Get user configuration' })\n  @ApiResponse({ status: 200, description: 'User configuration updated successfully.' })\n  @ApiQuery({ name: 'profile', required: false, description: 'Profile' })\n  @ApiBody({ description: 'user data', required: true, type: Object })\n  async updateUserConfig(@Param('chatId') chatId: string, @Query('profile') profile: string, @Body() data: any) {\n    return await this.appService.updateUserConfig(chatId, profile, data);\n  }\n  @Get('/getUserInfo')\n  @ApiOperation({ summary: 'Get user information' })\n  @ApiResponse({ status: 200, description: 'User information retrieved successfully.' })\n  async getUserInfo(@Query() filter: any) {\n    return await this.appService.getUserInfo(filter);\n  }\n\n  @Get('getdata')\n  @ApiOperation({ summary: 'Get data and refresh periodically' })\n  @ApiResponse({ status: 200, description: 'Successful operation' })\n  async getData(@Res() res: Response): Promise<void> {\n    this.appService.checkAndRefresh();\n\n    res.setHeader('Content-Type', 'text/html');\n    let resp = '<html><head></head><body>';\n    resp += await this.appService.getData();\n    resp += '</body></html>';\n    resp += `<script>\n                console.log(\"hi\");\n                setInterval(() => {\n                  window.location.reload();\n                }, 20000);\n            </script>`;\n    res.send(resp);\n  }\n}\n","import { forwardRef, MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport {\n  BuildModule, UsersModule, TelegramModule,\n  UserDataModule, ClientModule, ActiveChannelsModule,\n  UpiIdModule, StatModule, Stat2Module, PromoteStatModule,\n  ChannelsModule, TgSignupModule, LoggerMiddleware\n} from 'common-tg-service';\n\n\n@Module({\n  imports: [\n    forwardRef(() => BuildModule), forwardRef(() => UsersModule), forwardRef(() => TelegramModule),\n    forwardRef(() => UserDataModule), forwardRef(() => ClientModule),\n    forwardRef(() => ActiveChannelsModule), forwardRef(() => UpiIdModule),\n    forwardRef(() => StatModule), forwardRef(() => Stat2Module), forwardRef(() => PromoteStatModule),\n    forwardRef(() => ChannelsModule), forwardRef(() => TgSignupModule)],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LoggerMiddleware).forRoutes('*');\n  }\n}","import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { sleep, TotalList } from 'telegram/Helpers';\nimport { Api } from 'telegram/tl';\nimport { Dialog } from 'telegram/tl/custom/dialog';\nimport * as schedule from 'node-schedule-tz'\nimport {\n  UsersService,\n  TelegramService, UserDataService,\n  ClientService, ActiveChannelsService,\n  UpiIdService, StatService, Stat2Service,\n  PromoteStatService, ChannelsService,\n  fetchWithTimeout, ppplbot, parseError,\n  User, TelegramManager, CreateChannelDto,\n  Channel\n} from 'common-tg-service';\nimport connectionManager from 'common-tg-service/dist/components/Telegram/utils/connection-manager';\n@Injectable()\nexport class AppService implements OnModuleInit {\n  private userAccessData: Map<string, { timestamps: number[], videoDetails: any }> = new Map();\n  private joinChannelIntervalId: NodeJS.Timeout;\n  private joinChannelMap: Map<string, Channel[]> = new Map();\n\n  constructor(private usersService: UsersService,\n    private telegramService: TelegramService,\n    private userDataService: UserDataService,\n    private clientService: ClientService,\n    private activeChannelsService: ActiveChannelsService,\n    private upiIdService: UpiIdService,\n    private statService: StatService,\n    private stat2Service: Stat2Service,\n    private promoteStatService: PromoteStatService,\n    private channelsService: ChannelsService,\n  ) {\n    console.log(\"App Module Constructor initiated !!\");\n  }\n  private refresTime: number = 0;\n\n  onModuleInit() {\n    console.log(\"App Module initiated !!\");\n    try {\n      schedule.scheduleJob('test3', '25 2,9,16 * * * ', 'Asia/Kolkata', async () => {\n        await fetchWithTimeout(`${(ppplbot())}&text=ExecutingjoinchannelForClients-${process.env.clientId}`)\n        const now = new Date();\n        if (now.getUTCDate() % 3 === 1) {\n          this.leaveChannelsAll()\n        } else {\n          await this.joinchannelForClients()\n        }\n      })\n\n      // schedule.scheduleJob('test3', '0 * * * * ', 'Asia/Kolkata', async () => {\n      //   await this.clientService.refreshMap();\n      //   this.processUsers(400, 0);\n      //   await this.statService.deleteAll();\n      // })\n\n      // schedule.scheduleJob('test3', '25 2,9 * * * ', 'Asia/Kolkata', async () => {\n      //   const now = new Date();\n      //   if (now.getUTCDate() % 3 === 1) {\n      //     this.leaveChannelsAll()\n      //   }\n      //   await this.joinchannelForClients()\n      // })\n\n      // schedule.scheduleJob('test3', ' 25 0 * * * ', 'Asia/Kolkata', async () => {\n      //   const now = new Date();\n      //   if (now.getUTCDate() % 9 === 1) {\n      //     setTimeout(async () => {\n      //       await this.activeChannelsService.resetAvailableMsgs();\n      //       await this.activeChannelsService.updateBannedChannels();\n      //       await this.activeChannelsService.updateDefaultReactions();\n      //     }, 30000);\n      //   }\n\n      //   await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(await this.getPromotionStatsPlain())}`);\n      //   await this.userDataService.resetPaidUsers();\n      //   await this.statService.deleteAll();\n      //   await this.stat2Service.deleteAll();\n      //   await this.promoteStatService.reinitPromoteStats();\n      // })\n      // this.checkPromotions();\n      console.log(\"Added All Cron Jobs\")\n    } catch (error) {\n      console.log(\"Some Error: \", error);\n    }\n  }\n  async checkPromotions() {\n    setInterval(async () => {\n      const clients = await this.clientService.findAll();\n      for (const client of clients) {\n        const userPromoteStats = await this.promoteStatService.findByClient(client.clientId);\n        if (userPromoteStats?.isActive && (Date.now() - userPromoteStats?.lastUpdatedTimeStamp) / (1000 * 60) > 6) {\n          try {\n            await fetchWithTimeout(`${client.repl}/promote`, { timeout: 120000 });\n            console.log(client.clientId, \": Promote Triggered!!\");\n          } catch (error) {\n            parseError(error, \"Promotion Check Err\")\n          }\n        } else {\n          console.log(client.clientId, \": ALL Good!! ---\", Math.floor((Date.now() - userPromoteStats?.lastUpdatedTimeStamp) / (1000 * 60)));\n        }\n      }\n    }, 240000)\n  }\n\n  async getPromotionStatsPlain() {\n    let resp = '';\n    const result = await this.promoteStatService.findAll();\n    for (const data of result) {\n      resp += `\\n${data.client.toUpperCase()} : ${data.totalCount} ${data.totalCount > 0 ? ` | ${Number((Date.now() - data.lastUpdatedTimeStamp) / (1000 * 60)).toFixed(2)}` : ''}`;\n    }\n    return resp;\n  }\n\n  async leaveChannelsAll() {\n    await this.sendToAll('leavechannels')\n  }\n\n  async sendToAll(endpoint: string) {\n    const clients = await this.clientService.findAll();\n    for (const client of clients) {\n      const url = `${client.repl}/${endpoint}`\n      console.log(\"Trying : \", url)\n      fetchWithTimeout(url);\n      await sleep(2000);\n    }\n  }\n\n  public async exitPrimary() {\n    const clients = await this.clientService.findAll();\n    for (const client of clients) {\n      if (client.clientId.toLowerCase().includes('1')) {\n        await fetchWithTimeout(`${client.repl}/exit`);\n        await sleep(40000);\n      }\n    }\n  }\n\n  public async exitSecondary() {\n    const clients = await this.clientService.findAll();\n    for (const client of clients) {\n      if (client.clientId.toLowerCase().includes('2')) {\n        await fetchWithTimeout(`${client.repl}/exit`);\n        await sleep(40000);\n      }\n    }\n  }\n\n  public async refreshPrimary() {\n    const clients = await this.clientService.findAll();\n    for (const client of clients) {\n      if (client.clientId.toLowerCase().includes('1')) {\n        await fetchWithTimeout(`${client.repl}/exec/refresh`);\n        await sleep(40000);\n      }\n    }\n  }\n\n  public async refreshSecondary() {\n    const clients = await this.clientService.findAll();\n    for (const client of clients) {\n      if (client.clientId.toLowerCase().includes('2')) {\n        await fetchWithTimeout(`${client.repl}/exec/refresh`);\n        await sleep(40000);\n      }\n    }\n  }\n\n  async processUsers(limit?: number, skip?: number) {\n    const users = await this.getUser(limit, skip);\n    this.updateUsers(users);\n    return \"Initiated Users Update\"\n  }\n\n  async updateUsers(users: User[]) {\n    for (const user of users) {\n      try {\n        const telegramClient = await connectionManager.getClient(user.mobile, { autoDisconnect: false, handler: false });\n        const lastActive = await telegramClient.getLastActiveTime();\n        const me = await telegramClient.getMe()\n        const selfMSgInfo = await telegramClient.getSelfMSgsInfo();\n        const dialogs = await telegramClient.getDialogs({ limit: 500 });\n        const contacts = <Api.contacts.Contacts>await telegramClient.getContacts()\n        const callsInfo = await telegramClient.getCallLog();\n        const recentUsers = await this.processChannels(dialogs, telegramClient)\n        await this.usersService.update(user.tgId, {\n          contacts: contacts.savedCount,\n          calls: callsInfo?.totalCalls > 0 ? callsInfo : { chatCallCounts: [], incoming: 0, outgoing: 0, totalCalls: 0, video: 0 },\n          firstName: me.firstName,\n          lastName: me.lastName, username: me.username, msgs: selfMSgInfo.total, totalChats: dialogs.total,\n          lastActive, tgId: me.id.toString(),\n          recentUsers\n        })\n        await connectionManager.unregisterClient(user.mobile);\n      } catch (error) {\n        parseError(error, \"UMS :: \")\n      }\n    }\n  }\n\n  async processChannels(dialogs: TotalList<Dialog>, telegramClient: TelegramManager) {\n    const recentUsers = []\n    for (const chat of dialogs) {\n      try {\n        if (chat.isChannel || chat.isGroup) {\n          const chatEntity = <Api.Channel>chat.entity;\n          const cannotSendMsgs = chatEntity.defaultBannedRights?.sendMessages;\n          if (!chatEntity.broadcast && !cannotSendMsgs && chatEntity.participantsCount > 50) {\n            const channel: CreateChannelDto = {\n              channelId: chatEntity.id.toString(),\n              canSendMsgs: true,\n              participantsCount: chatEntity.participantsCount,\n              private: false,\n              title: chatEntity.title,\n              broadcast: chatEntity.broadcast,\n              megagroup: chatEntity.megagroup,\n              restricted: chatEntity.restricted,\n              sendMessages: true,\n              username: chatEntity.username,\n              forbidden: false\n            }\n            this.channelsService.update(channel.channelId, channel)\n          }\n        } else {\n          const msgs = await telegramClient.getMessages(chat.id);\n          if (msgs.total > 1000) {\n            for (const message of msgs) {\n              let video = 0;\n              let photo = 0\n              if (message.media instanceof Api.MessageMediaPhoto) {\n                photo++\n              } else if (message.media instanceof Api.MessageMediaDocument && (message.document?.mimeType?.startsWith('video') || message.document?.mimeType?.startsWith('image'))) {\n                video++\n              }\n              recentUsers.push({\n                total: msgs.total,\n                video,\n                photo,\n                chatId: chat.id.toString(),\n              })\n            }\n          }\n        }\n        return recentUsers;\n      } catch (error) {\n        parseError(error)\n      }\n    }\n  }\n\n\n  async getUser(limit?: number, skip?: number) {\n    var currentDate = new Date();\n\n    var weekAgoDate = new Date(currentDate);\n    weekAgoDate.setDate(currentDate.getDate() - 7);\n\n    var monthAgoDate = new Date(currentDate);\n    monthAgoDate.setDate(currentDate.getDate() - 30);\n\n    var threeMonthAgoDate = new Date(currentDate);\n    threeMonthAgoDate.setDate(currentDate.getDate() - 90);\n\n    var query = {\n      $or: [\n        { createdAt: { $gt: monthAgoDate }, updatedAt: { $lt: weekAgoDate } },\n        { createdAt: { $lte: monthAgoDate, $gt: threeMonthAgoDate }, updatedAt: { $lt: monthAgoDate } },\n        { createdAt: { $lte: threeMonthAgoDate }, updatedAt: { $lte: threeMonthAgoDate } }\n      ]\n    };\n    const users = await this.usersService.executeQuery(query, {}, limit || 300, skip || 0)\n    return users;\n  }\n  getHello(): string {\n    return 'Hello World!';\n  }\n\n  async isRecentUser(chatId: string): Promise<{ count: number, videoDetails: any }> {\n    const accessData = this.userAccessData.get(chatId) || { timestamps: [], videoDetails: {} };\n    const currentTime = Date.now();\n    const recentAccessData = accessData.timestamps.filter(timestamp => currentTime - timestamp <= 15 * 60 * 1000);\n    recentAccessData.push(currentTime);\n    this.userAccessData.set(chatId, { videoDetails: accessData.videoDetails, timestamps: recentAccessData });\n    const result = { count: recentAccessData.length, videoDetails: accessData.videoDetails }\n    console.log(result)\n    return result;\n  }\n\n  async updateRecentUser(chatId: string, videoDetails: any): Promise<void> {\n    const accessData = this.userAccessData.get(chatId) || { timestamps: [], videoDetails: {} };\n    const updatedVideoDetails = { ...accessData.videoDetails, ...videoDetails };\n    console.log({ videoDetails: updatedVideoDetails, timestamps: accessData.timestamps })\n    this.userAccessData.set(chatId, { videoDetails: updatedVideoDetails, timestamps: accessData.timestamps });\n  }\n\n  async resetRecentUser(chatId: string): Promise<{ count: number }> {\n    this.userAccessData.delete(chatId);\n    return { count: 0 };\n  }\n\n  async getPaymentStats(chatId: string, profile: string) {\n    const resp = { paid: 0, demoGiven: 0, secondShow: 0, fullShow: 0, latestCallTime: 0, videos: [] };\n    const threeDaysAgo = Date.now() - (3 * 24 * 60 * 60 * 1000);\n    const fiveDaysAgo = Date.now() - (5 * 24 * 60 * 60 * 1000);\n\n    try {\n      const query1 = { chatId, profile: { $exists: true, $ne: profile }, payAmount: { $gte: 10 } };\n      const query2 = { chatId, profile: { $exists: true, $ne: profile } };\n\n      const document = await this.userDataService.executeQuery(query1);\n      const document2 = await this.userDataService.executeQuery(query2);\n\n      if (document.length > 0) {\n        resp.paid = document.length;\n      }\n\n      if (document2.length > 0) {\n        for (const doc of document2) {\n          if (doc.callTime > threeDaysAgo) {\n            if (doc.demoGiven) {\n              resp.demoGiven++;\n            }\n            if (doc.secondShow) {\n              resp.secondShow++;\n            }\n            if (doc.fullShow) {\n              resp.fullShow++;\n            }\n            if (doc.callTime > resp.latestCallTime) {\n              resp.latestCallTime = doc.callTime;\n            }\n            resp.videos.push(...doc.videos);\n          } else {\n            if (doc.lastMsgTimeStamp > fiveDaysAgo) {\n              await this.userDataService.update(doc.profile, doc.chatId, { payAmount: 0, videos: [], demoGiven: false, secondShow: false, highestPayAmount: 0, });\n            }\n          }\n        }\n      }\n    } catch (error) {\n      parseError(error);\n    }\n    console.log(resp);\n    return resp;\n  }\n\n  async sendtoChannel(chatId: string, token: string, message: string) {\n    function isEncoded(str) {\n      try {\n        return str !== decodeURIComponent(str);\n      } catch (e) {\n        return false;\n      }\n    }\n    const encodedMessage = isEncoded(message) ? message : encodeURIComponent(message);\n    console.log(decodeURIComponent(encodedMessage));\n    const url = `${ppplbot(chatId, token)}&text=${encodedMessage}`;\n    return (await fetchWithTimeout(url, {}, 0))?.data;\n  }\n\n  async findAllMasked(query: object) {\n    return await this.clientService.findAllMasked(query)\n  }\n  async portalData(query: object) {\n    const client = (await this.clientService.findAllMasked(query))[0];\n    const upis = await this.upiIdService.findOne();\n    return { client, upis }\n  }\n  async joinchannelForClients(): Promise<string> {\n    console.log(\"Joining Channel Started\")\n    await connectionManager.disconnectAll();\n    await sleep(2000);\n    const clients = await this.clientService.findAll();\n    clients.map(async (document) => {\n      try {\n        let resp = await fetchWithTimeout(`${document.repl}/channelinfo`, { timeout: 200000 }, 1);\n        await fetchWithTimeout(`${(ppplbot())}&text=Channel SendTrue :: ${document.clientId}: ${resp.data.canSendTrueCount}`)\n        if (resp?.data?.canSendTrueCount && resp?.data?.canSendTrueCount < 350) {\n          const result = await this.activeChannelsService.getActiveChannels(150, 0, resp.data?.ids);\n          await fetchWithTimeout(`${(ppplbot())}&text=Started Joining Channels for ${document.clientId}: ${result.length}`)\n          this.joinChannelMap.set(document.repl, result);\n        }\n      } catch (error) {\n        parseError(error)\n      }\n    })\n    this.joinChannelQueue();\n    console.log(\"Joining Channel Triggered Succesfully for \", clients.length);\n    return \"Initiated Joining channels\"\n  }\n\n  async joinChannelQueue() {\n    this.joinChannelIntervalId = setInterval(async () => {\n      const keys = Array.from(this.joinChannelMap.keys());\n      if (keys.length > 0) {\n        console.log(\"In JOIN CHANNEL interval: \", new Date().toISOString());\n        const promises = keys.map(async url => {\n          const channels = this.joinChannelMap.get(url);\n          if (channels && channels.length > 0) {\n            const channel = channels.shift();\n            console.log(url, \" Pending Channels :\", channels.length)\n            this.joinChannelMap.set(url, channels);\n            try {\n              await fetchWithTimeout(`${url}/joinchannel?username=${channel.username}`);\n              console.log(url, \" Trying to join :\", channel.username);\n            } catch (error) {\n              parseError(error, \"Outer Err: \");\n            }\n          } else {\n            this.joinChannelMap.delete(url);\n          }\n        });\n        await Promise.all(promises);\n      } else {\n        this.clearJoinChannelInterval()\n      }\n    }, 3 * 60 * 1000);\n  }\n\n  clearJoinChannelInterval() {\n    if (this.joinChannelIntervalId) {\n      console.log(\"Cleared joinChannel Set Interval\")\n      clearInterval(this.joinChannelIntervalId);\n      this.joinChannelIntervalId = null;\n    }\n  }\n\n  async refreshmap() {\n    await this.clientService.refreshMap()\n    await this.clientService.checkNpoint();\n  }\n\n  async blockUserAll(chatId: string) {\n    let profileData = ''\n    const userDatas = await this.userDataService.search({ chatId });\n    for (const userData of userDatas) {\n      const profileRegex = new RegExp(userData.profile, \"i\")\n      const profiles = await this.clientService.executeQuery({ clientId: { $regex: profileRegex } })\n      for (const profile of profiles) {\n        const url = `${profile.repl}/blockuser/${chatId}`;\n        console.log(\"Executing: \", url)\n        const result = await fetchWithTimeout(url);\n        console.log(result.data)\n      }\n      profileData = profileData + \" | \" + userData.profile;\n    }\n    return profileData\n  }\n\n  async unblockUserAll(chatId: string) {\n    let profileData = ''\n    const userDatas = await this.userDataService.search({ chatId });\n    for (const userData of userDatas) {\n      const profileRegex = new RegExp(userData.profile, \"i\")\n      const profiles = await this.clientService.executeQuery({ clientId: { $regex: profileRegex } })\n      for (const profile of profiles) {\n        const url = `${profile.repl}/unblockuser/${chatId}`;\n        console.log(\"Executing: \", url)\n        const result = await fetchWithTimeout(url);\n        console.log(result.data)\n      }\n      profileData = profileData + \" | \" + userData.profile;\n    }\n    return profileData\n  }\n\n  async getRequestCall(username: string, chatId: string): Promise<any> {\n    const user = (await this.clientService.search({ username: username.toLowerCase() }))[0];\n    console.log(`Call Request Recived: ${username} | ${chatId}`)\n    if (user) {\n      const payload = { chatId, profile: user.clientId }\n      const options = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        data: JSON.stringify(payload),\n      };\n      const result = await fetchWithTimeout(\"https://arpithared.onrender.com/events/schedule\", options, 3);\n      console.log(result?.data)\n    }\n  }\n\n  async getUserData(profile: string, clientId: string, chatId: string): Promise<any> {\n    if (!profile) {\n      profile = clientId?.replace(/\\d/g, '')\n    }\n    return await this.userDataService.findOne(profile, chatId);\n  }\n\n  async updateUserData(profile: string, clientId: string, body: any): Promise<any> {\n    if (!profile) {\n      profile = clientId?.replace(/\\d/g, '')\n    }\n    const chatId = body.chatId;\n    return await this.userDataService.update(profile, chatId, body);\n  }\n\n  async updateUserConfig(chatId: string, profile: string, data: any): Promise<any> {\n    this.userDataService.update(profile, chatId, data)\n  }\n\n  async getUserConfig(filter: any): Promise<any> {\n    // Implement your logic here\n  }\n\n  async getallupiIds() {\n    return await this.upiIdService.findOne();\n  }\n\n  async getUserInfo(filter: any): Promise<any> {\n    const client = <any>(await this.clientService.executeQuery(filter,))[0]\n    const result = { ...(client._doc ? client._doc : client) }\n    delete result['session'];\n    delete result['mobile'];\n    delete result['deployKey'];\n    delete result['promoteMobile'];\n    return result\n  }\n\n  extractNumberFromString(inputString) {\n    const regexPattern = /\\d+/;\n    const matchResult = inputString?.match(regexPattern);\n    if (matchResult && matchResult.length > 0) {\n      // Parse the matched string into a number and return it\n      return parseInt(matchResult[0], 10);\n    }\n    // If no number is found, return null\n    return null;\n  }\n\n  async createInitializedObject() {\n    const clients = await this.clientService.findAll();\n    const initializedObject = {};\n    for (const user of clients) {\n      if (this.extractNumberFromString(user.clientId))\n        initializedObject[user.clientId.toUpperCase()] = {\n          profile: user.clientId.toUpperCase(),\n          totalCount: 0,\n          totalPaid: 0,\n          totalOldPaid: 0,\n          oldPaidDemo: 0,\n          totalpendingDemos: 0,\n          oldPendingDemos: 0,\n          totalNew: 0,\n          totalNewPaid: 0,\n          newPaidDemo: 0,\n          newPendingDemos: 0,\n          names: \"\",\n          fullShowPPl: 0,\n          fullShowNames: \"\"\n        }\n    }\n\n    return initializedObject;\n  }\n\n  async getData(): Promise<string> {\n    const profileData = await this.createInitializedObject();\n    const stats = await this.statService.findAll();\n    for (const stat of stats) {\n      const { count, newUser, payAmount, demoGivenToday, demoGiven, profile, client, name, secondShow } = stat;\n\n      if (client && profileData[client.toUpperCase()]) {\n        const userData = profileData[client.toUpperCase()];\n        userData.totalCount += count;\n        userData.totalPaid += payAmount > 0 ? 1 : 0;\n        userData.totalOldPaid += (payAmount > 0 && !newUser) ? 1 : 0;\n        userData.oldPaidDemo += (demoGivenToday && !newUser) ? 1 : 0;\n        userData.totalpendingDemos += (payAmount > 25 && !demoGiven) ? 1 : 0;\n        userData.oldPendingDemos += (payAmount > 25 && !demoGiven && !newUser) ? 1 : 0;\n        if (payAmount > 25 && !demoGiven) {\n          userData.names = userData.names + ` ${name} |`;\n        }\n\n        if (demoGiven && ((payAmount > 90 && !secondShow) || (payAmount > 150 && secondShow))) {\n          userData.fullShowPPl++;\n          userData.fullShowNames = userData.fullShowNames + ` ${name} |`;\n        }\n\n        if (newUser) {\n          userData.totalNew += 1;\n          userData.totalNewPaid += payAmount > 0 ? 1 : 0;\n          userData.newPaidDemo += demoGivenToday ? 1 : 0;\n          userData.newPendingDemos += (payAmount > 25 && !demoGiven) ? 1 : 0;\n        }\n      }\n    }\n\n    const profileDataArray = Object.entries(profileData);\n    profileDataArray.sort((a: any, b: any) => b[1].totalpendingDemos - a[1].totalpendingDemos);\n    let reply = '';\n    for (const [profile, userData] of profileDataArray) {\n      reply += `${profile.toUpperCase()} : <b>${(userData as any).totalpendingDemos}</b> | ${(userData as any).names}<br>`;\n    }\n\n    profileDataArray.sort((a: any, b: any) => b[1].fullShowPPl - a[1].fullShowPPl);\n    let reply2 = '';\n    for (const [profile, userData] of profileDataArray) {\n      reply2 += `${profile.toUpperCase()} : <b>${(userData as any).fullShowPPl}</b> |${(userData as any).fullShowNames}<br>`;\n    }\n\n    const reply3 = await this.getPromotionStats();\n    console.log(reply3)\n\n    return (\n      `<div>\n        <div style=\"display: flex; margin-bottom: 60px\">\n          <div style=\"flex: 1;\">${reply} </div>\n      < div style = \"flex: 1; \" > ${reply2} </div>\n        </div>\n        < div style = \"display: flex;\" >\n          <div style=\"flex: 1; \" > ${reply3} </div>\n            </div>\n            </div>`\n    );\n  }\n\n  async getPromotionStats(): Promise<string> {\n    let resp = '';\n    const result = await this.promoteStatService.findAll();\n    for (const data of result) {\n      resp += `${data.client.toUpperCase()} : <b>${data.totalCount}</b>${data.totalCount > 0 ? ` | ${Number((Date.now() - data.lastUpdatedTimeStamp) / (1000 * 60)).toFixed(2)}` : ''}<br>`;\n    }\n    return resp;\n  }\n\n  async checkAndRefresh() {\n    if (Date.now() > this.refresTime) {\n      this.refresTime = Date.now() + (5 * 60 * 1000);\n      const clients = await this.clientService.findAll()\n      for (const value of clients) {\n        await fetchWithTimeout(`${value.repl}/markasread`);\n        await sleep(3000);\n      }\n    }\n  }\n}\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/swagger\");","module.exports = require(\"common-tg-service\");","module.exports = require(\"common-tg-service/dist/components/Telegram/utils/connection-manager\");","module.exports = require(\"mongoose\");","module.exports = require(\"node-schedule-tz\");","module.exports = require(\"telegram/Helpers\");","module.exports = require(\"telegram/tl\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { NestFactory } from '@nestjs/core';\nimport mongoose from 'mongoose'\nimport { AppModule } from './app.module';\nimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\nimport { ValidationPipe } from '@nestjs/common';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  \n  app.use((req, res, next) => {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n    res.header('Access-Control-Allow-Headers', 'Content-Type, Accept');\n    res.header('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');\n    res.header('Pragma', 'no-cache');\n    res.header('Expires', '0');\n    res.header('Surrogate-Control', 'no-store');\n    next();\n  });\n\n  app.enableCors({\n    allowedHeaders: \"*\",\n    origin: \"*\"\n  });\n  app.useGlobalPipes(new ValidationPipe({\n    transform: true,\n  }));\n  app.use((req, res, next) => {\n    res.setHeader('Cache-Control', 'no-store');\n    next();\n  });\n  const config = new DocumentBuilder()\n    .setTitle('NestJS and Express API')\n    .setDescription('API documentation')\n    .setVersion('1.0')\n    .build();\n  const document = SwaggerModule.createDocument(app, config);\n  // fs.writeFileSync('./swagger-spec.json', JSON.stringify(document, null, 2));\n  SwaggerModule.setup('api', app, document);\n  mongoose.set('debug', true)\n\n  process.on('unhandledRejection', (reason, promise) => {\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n  });\n\n  process.on('uncaughtException', (reason, promise) => {\n    console.error(promise, reason);\n  });\n\n  let isShuttingDown = false;\n  const shutdown = async (signal: string) => {\n    if (isShuttingDown) return;\n    isShuttingDown = true;\n    console.log(`${signal} received`);\n    await app.close();\n    process.exit(0);\n  };\n\n  process.on('exit', async () => {\n    console.log('Application closed');\n  });\n\n  process.on('SIGINT', async () => {\n    await shutdown('SIGINT');\n  });\n\n  process.on('SIGTERM', async () => {\n    await shutdown('SIGTERM');\n  });\n\n  process.on('SIGQUIT', async () => {\n    await shutdown('SIGQUIT');\n  });\n\n  await app.init();\n  await app.listen(process.env.PORT || 9000);\n}\nbootstrap();\n"],"names":[],"sourceRoot":""}